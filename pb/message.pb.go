// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// 不能有相同的消息类型 如不能有多个 Move
	Seq int32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*Message_LoginRes
	//	*Message_LoginResponse
	Content              isMessage_Content `protobuf_oneof:"content"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Message) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type isMessage_Content interface {
	isMessage_Content()
}

type Message_LoginRes struct {
	LoginRes *LoginRequest `protobuf:"bytes,11,opt,name=loginRes,proto3,oneof"`
}

type Message_LoginResponse struct {
	LoginResponse *LoginResponse `protobuf:"bytes,12,opt,name=LoginResponse,proto3,oneof"`
}

func (*Message_LoginRes) isMessage_Content() {}

func (*Message_LoginResponse) isMessage_Content() {}

func (m *Message) GetContent() isMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Message) GetLoginRes() *LoginRequest {
	if x, ok := m.GetContent().(*Message_LoginRes); ok {
		return x.LoginRes
	}
	return nil
}

func (m *Message) GetLoginResponse() *LoginResponse {
	if x, ok := m.GetContent().(*Message_LoginResponse); ok {
		return x.LoginResponse
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_LoginRes)(nil),
		(*Message_LoginResponse)(nil),
	}
}

func init() {
	proto.RegisterType((*Message)(nil), "pb.Message")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0xce,
	0xc9, 0x4f, 0xcf, 0xcc, 0x83, 0x08, 0x28, 0x2d, 0x65, 0xe4, 0x62, 0xf7, 0x85, 0x28, 0x11, 0x12,
	0xe2, 0x62, 0x29, 0xa9, 0x2c, 0x48, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0xb3, 0x85,
	0x04, 0xb8, 0x98, 0x8b, 0x53, 0x0b, 0x25, 0x98, 0xc0, 0x42, 0x20, 0xa6, 0x90, 0x1e, 0x17, 0x07,
	0xd8, 0x80, 0xa0, 0xd4, 0x62, 0x09, 0x6e, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x01, 0xbd, 0x82, 0x24,
	0x3d, 0x1f, 0x88, 0x58, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x07, 0x43, 0x10, 0x5c, 0x8d, 0x90, 0x25,
	0x17, 0x2f, 0x54, 0xae, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x82, 0x07, 0xac, 0x49, 0x10, 0x49,
	0x13, 0x44, 0xc2, 0x83, 0x21, 0x08, 0x55, 0xa5, 0x13, 0x27, 0x17, 0x7b, 0x72, 0x7e, 0x5e, 0x49,
	0x6a, 0x5e, 0x49, 0x12, 0x1b, 0xd8, 0xb9, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x28, 0x41,
	0x3d, 0xc2, 0xd0, 0x00, 0x00, 0x00,
}
